library(ggplot2)
library(lme4)
library(lmerTest)
library(textstem)
install.packages("lmerTest")
library(lmerTest)
library(stringr)
library(textstem)
library(tidyverse)
library(lmerTest)
library(lme4)
library(stringr)
library(textstem)
library(tidyverse)
theme_set(theme_bw())
setwd(this.dir)
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
source("../../../../../analysis/helpers.R")
corp = read.table("../../../../../corpus/results/swbd.tab",sep="\t",header=T,quote="")
d = read.csv("../data/modals_in_whinfinitivals-merged.csv")
# rename item_id from corpus file
names(corp)[names(corp) == "Item_ID"] <- "tgrep_id"
# filter from the database the tgrep_ids from the raw data
corp_match = corp %>%
filter(tgrep_id %in% d$tgrep_id)
# join dfs together
d <- left_join(d, corp_match, by="tgrep_id")
ggplot(d, aes(x=rating)) +
geom_histogram()
ggplot(d, aes(x=rating)) +
geom_histogram()
ggplot(d, aes(x=rating)) +
geom_histogram()
ggplot(d, aes(x=response)) +
geom_histogram()
View(d)
ggplot(d, aes(x=response)) +
geom_histogram()
ggplot(d, aes(x=response)) +
geom_histogram()
ggplot(d, aes(x=response)) +
geom_histogram()
ggplot(d, aes(x=count)) +
geom_histogram()
summary(d)
ggplot(d, aes(x=response)) +
geom_histogram(stat="count")
filter(d, tgrep_id != "example1" | tgrep_id != "example2" | tgrep_id != "botcheck")
d_new = filter(d, tgrep_id != "example1" | tgrep_id != "example2" | tgrep_id != "botcheck")
View(d_new)
d_new = filter(d, tgrep_id != "example1" | tgrep_id != "example2" | tgrep_id != "bot_check")
View(d_new)
d_new <- filter(d, tgrep_id != "example1" | tgrep_id != "example2" | tgrep_id != "bot_check")
View(d_new)
dt2 <- subset(d, tgrep_id != example1&tgrep_id != example2&tgrep_id != bot_check)
ggplot(d, aes(x=response)) +
geom_histogram(stat="count")
dt2 <- subset(d, tgrep_id != "example1"&tgrep_id != example2&tgrep_id != bot_check)
dt2 <- subset(d, tgrep_id != "example1"&tgrep_id != "example2"&tgrep_id != "bot_check")
View(dt2)
ggplot(dt2, aes(x=response)) +
geom_histogram(stat="count")
#exclude the examples and the bot check
d_items <- subset(d, tgrep_id != "example1"&tgrep_id != "example2"&tgrep_id != "bot_check")
ggplot(d_items, aes(x=response)) +
geom_histogram(stat="count")
View(d_items)
#exclude the example non-items and the bot check
test <- subset(d, tgrep_id != "example1"&tgrep_id != "example2"&tgrep_id != "bot_check")
ggplot(test, aes(x=response)) +
geom_histogram(stat="count")
how <- subset(test, Wh =="how")
ggplot(how, aes(x=response)) +
geom_histogram(stat="count")
what <- subset(test, Wh =="what")
ggplot(what, aes(x=response)) +
geom_histogram(stat="count")
ggplot(how, aes(x=response)) +
geom_histogram(stat="count")
ggplot(what, aes(x=response)) +
geom_histogram(stat="count")
ggplot(how, aes(x=response)) +
geom_histogram(stat="count")
strange <- subset(test, strangeSentence == 1)
ggplot(strange, aes(x=Wh)) +
geom_histogram(stat="count")
save(test, file = "test_items_responses")
save(test, file = "test_items_responses.csv")
View(test)
write.csv(test, "testItems_with_responses.csv", row.names = FALSE)
library(languageR)
library(lme4)
library(MuMIn)
library(ordinal)
install.packages("ordinal")
library(ggplot2)
library(lme4)
library(lmerTest)
library(stringr)
library(textstem)
library(tidyverse)
theme_set(theme_bw())
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
source("../../../helpers.R")
corp = read.table("../../../../corpus/results/swbd.tab",sep="\t",header=T,quote="")
d = read.csv("../data/modals_in_whinfinitivals-merged.csv")
# rename item_id from corpus file
names(corp)[names(corp) == "Item_ID"] <- "tgrep_id"
# filter from the database the tgrep_ids from the raw data
corp_match = corp %>%
filter(tgrep_id %in% d$tgrep_id)
# join dfs together
d <- left_join(d, corp_match, by="tgrep_id")
#exclude the example non-items and the bot check
test <- subset(d, tgrep_id != "example1"&tgrep_id != "example2"&tgrep_id != "bot_check")
View(test)
ggplot(test, aes(x=response)) +
geom_histogram(stat="count")
install.packages(MASS)
install.packages("MASS")
install.packages("MASS")
library(MASS)
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
data = read.csv("../data/testItems_with_responses.csv")
summary(data)
library(ggplot2)
library(tidyverse)
library(textstem)
head(data)
# Setting up the data
test = read.csv("../data/testItems_with_responses.csv")
summary(test)
testItems_with_responsestestItems_with_responses
View(test)
model_fit <- polr(response~Wh, data = test, Hess = TRUE)
model_fit <- polr(response~Wh, data = test, Hess = TRUE, method = c("logistic"))
response = <- test$response
response <- test$response
View(response)
# Setting up the data
test = read.csv("../data/testItems_with_responses.csv")
summary(test)
test$response <- as.factor(test$response)
model_fit <- polr(response~Wh, data = test, Hess = TRUE)
summary(model_fit)
summary(test$Wh)
test
test.columns
l
ls
ls
ls(())
ls()
ls()
ls()
ls()
summary(test$Wh)
model_fit <- polr(response~Wh, data = test, Hess = TRUE)
summary(model_fit)
library(MASS)
library(ggplot2)
library(tidyverse)
library(textstem)
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
test = read.csv("../data/testItems_with_responses.csv")
test$response <- as.factor(test$response)
model_fit <- polr(response~Wh, data = test, Hess = TRUE)
summary(model_fit)
model_fit
test
test$WhA
test$Wh
model_fit <- polr(response~Wh, data = test)
summary(model_fit)
summary(model_fit)
model_fit.coef
model_fit$coefficients
model_fit$fitted.values
Wh
response~Wh
response
response
Wh
model_fit$lev
model_fit$terms
model$convergence
model_fit$convergence
View(model_fit)
model_fit <- Polr(response~Wh, data = test)
model_fit <- Polr(test$response~test$Wh, data = test)
model_fit <- polr(test$response~test$Wh, data = test)
summary(model_fit)
table(test$Wh)
test$Wh <- as.factor(test$Wh, labels = ("how" "what" "where" "who"))
test$Wh <- as.factor(test$Wh, labels = c("how", "what", "where", "who"))
test$Wh <- as.factor(test$Wh)
model_fit <- polr(test$response~test$Wh, data = test)
summary(model_fit)
test$Wh
model_fit <- polr(test$response~test$Wh + 0, data = test)
summary(model_fit)
model_fit <- polr(test$response~test$Wh, data = test)
summary(model_fit)
model_fit <- polr(test$response~test$Wh - 1, data = test)
summary(model_fit)
model_fit <- polr(test$response~test$Wh, data = test)
summary(model_fit)
model_fit <- polr(test$response~test$Wh + 0, data = test)
model_fit <- polr(response~Wh + MatrixNegPresent, data = test)
summary(model_fit)
model_fit <- polr(response~Wh + MatrixNegPresent + 0, data = test)
model_fit <- polr(response~Wh, data = test)
model_fit <- polr(response~Wh, data = test, Hess=TRUE)
summary(model_fit)
summary_table <- coef(summary(model_fit))
pval <- pnorm(abs(summary_table[, "t value"]),lower.tail = FALSE)* 2
summary_table <- cbind(summary_table, "p value" = round(pval,3))
summary_table
